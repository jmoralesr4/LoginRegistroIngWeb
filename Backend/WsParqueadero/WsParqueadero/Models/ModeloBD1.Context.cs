//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WsParqueadero.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IngWebParqueaderoEntities : DbContext
    {
        public IngWebParqueaderoEntities()
            : base("name=IngWebParqueaderoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Pago> Pago { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
    
        public virtual int UpdatePago(Nullable<int> id_Pago, Nullable<int> tarifa, Nullable<int> cedula, string fecha, string horaIngreso, string total, string estadoTx)
        {
            var id_PagoParameter = id_Pago.HasValue ?
                new ObjectParameter("id_Pago", id_Pago) :
                new ObjectParameter("id_Pago", typeof(int));
    
            var tarifaParameter = tarifa.HasValue ?
                new ObjectParameter("Tarifa", tarifa) :
                new ObjectParameter("Tarifa", typeof(int));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(string));
    
            var horaIngresoParameter = horaIngreso != null ?
                new ObjectParameter("HoraIngreso", horaIngreso) :
                new ObjectParameter("HoraIngreso", typeof(string));
    
            var totalParameter = total != null ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(string));
    
            var estadoTxParameter = estadoTx != null ?
                new ObjectParameter("EstadoTx", estadoTx) :
                new ObjectParameter("EstadoTx", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePago", id_PagoParameter, tarifaParameter, cedulaParameter, fechaParameter, horaIngresoParameter, totalParameter, estadoTxParameter);
        }
    
        public virtual int InsertarUsuario(Nullable<int> cedula, string nombre, string apellido, string email, string telefono, string tipoVehiculo, string placa, string perfil, string usuario, string contrasena, string estado, string tipoDocumento)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var tipoVehiculoParameter = tipoVehiculo != null ?
                new ObjectParameter("TipoVehiculo", tipoVehiculo) :
                new ObjectParameter("TipoVehiculo", typeof(string));
    
            var placaParameter = placa != null ?
                new ObjectParameter("Placa", placa) :
                new ObjectParameter("Placa", typeof(string));
    
            var perfilParameter = perfil != null ?
                new ObjectParameter("Perfil", perfil) :
                new ObjectParameter("Perfil", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var tipoDocumentoParameter = tipoDocumento != null ?
                new ObjectParameter("TipoDocumento", tipoDocumento) :
                new ObjectParameter("TipoDocumento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarUsuario", cedulaParameter, nombreParameter, apellidoParameter, emailParameter, telefonoParameter, tipoVehiculoParameter, placaParameter, perfilParameter, usuarioParameter, contrasenaParameter, estadoParameter, tipoDocumentoParameter);
        }
    }
}
